extend type Query {
  conferenceList(pager: PagerInput!, filters: ConferenceFilterInput): ConferenceList
  conference(id: ID!): Conference
  users(id: ID!): [UsersList]
}

type UsersList {
  attendeeEmail: String
}

type Conference {
  id: ID!
  name: String!
  organizerEmail: String
  startDate: DateTime!
  endDate: DateTime!
  type: Type
  category: Category
  location: Location!
  speakers: [Speaker!]!
  status(userEmail: String!): Status
}

type Location {
  id: ID!
  name: String
  address: String
  latitude: String
  longitude: String
  city: City!
  county: County!
  country: Country!
}

type Speaker {
  id: ID!
  name: String
  isMainSpeaker: Boolean
  nationality: String
  rating: Float
}

type ConferenceList {
  values: [Conference!]!
  pagination(pager: PagerInput!, filters: ConferenceFilterInput): Pagination
}

type AttendConference {
  code: String
  suggestedConferences: [Conference!]
}

input ConferenceFilterInput {
  startDate: DateTime
  endDate: DateTime
  organizerEmail: String
}

input Attendee {
  attendeeEmail: String!
  conferenceId: ID!
}

input ConferenceInput {
  id: ID
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  organizerEmail: String!
  type: TypeInput
  category: CategoryInput
  location: LocationInput!
  speakers: [SpeakerInput!]!
  deletedSpeakers: [ID]
}

input TypeInput {
  id: Int
  name: String!
  code: String
}

input CategoryInput {
  id: Int
  name: String!
  code: String
}

input LocationInput {
  id: ID
  name: String!
  address: String
  latitude: String
  longitude: String
  cityId: Int
  countyId: Int
  countryId: Int
}

input SpeakerInput {
  id: ID
  name: String!
  nationality: String
  rating: Float
  isMainSpeaker: Boolean
}

extend type Mutation {
  attend(input: Attendee): AttendConference
  withdraw(input: Attendee!): Int
  saveConference(input: ConferenceInput): Conference!
  join(input: Attendee): String
}
